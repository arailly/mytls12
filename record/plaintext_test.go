package record

import "testing"

func TestFromBytes(t *testing.T) {
	packetBytes := []byte{
		0x16, 0x03, 0x03, 0x00, 0x31, 0x02, 0x00, 0x00,
		0x2d, 0x03, 0x03, 0x91, 0x36, 0xd8, 0xea, 0x62,
		0x25, 0xdc, 0x07, 0x2d, 0xc1, 0xdb, 0x77, 0xe0,
		0x77, 0x5d, 0xba, 0x98, 0x50, 0xf0, 0xf7, 0x27,
		0xc9, 0x07, 0x11, 0x44, 0x4f, 0x57, 0x4e, 0x47,
		0x52, 0x44, 0x01, 0x00, 0x00, 0x2f, 0x00, 0x00,
		0x05, 0xff, 0x01, 0x00, 0x01, 0x00,
	}
	record := FromBytes(packetBytes)[0]
	if record.contentType != ContentTypeHandshake {
		t.Error(record.contentType)
	}
	if record.version != ProtocolVersionTLS12 {
		t.Error(record.version)
	}
	if record.length != 49 {
		t.Error(record.length)
	}
	if len(record.fragment) != 49 {
		t.Error(len(record.fragment))
	}
}

func TestFromBytes2(t *testing.T) {
	packetBytes := []byte{
		0x16, 0x03, 0x03, 0x00, 0x31, 0x02, 0x00, 0x00,
		0x2d, 0x03, 0x03, 0x91, 0x36, 0xd8, 0xea, 0x62,
		0x25, 0xdc, 0x07, 0x2d, 0xc1, 0xdb, 0x77, 0xe0,
		0x77, 0x5d, 0xba, 0x98, 0x50, 0xf0, 0xf7, 0x27,
		0xc9, 0x07, 0x11, 0x44, 0x4f, 0x57, 0x4e, 0x47,
		0x52, 0x44, 0x01, 0x00, 0x00, 0x2f, 0x00, 0x00,
		0x05, 0xff, 0x01, 0x00, 0x01, 0x00, 0x16, 0x03,
		0x03, 0x04, 0x22, 0x0b, 0x00, 0x04, 0x1e, 0x00,
		0x04, 0x1b, 0x00, 0x04, 0x18, 0x30, 0x82, 0x04,
		0x14, 0x30, 0x82, 0x02, 0xfc, 0xa0, 0x03, 0x02,
		0x01, 0x02, 0x02, 0x14, 0x5f, 0x97, 0x3e, 0x2a,
		0x61, 0xe7, 0x6e, 0xb4, 0x7f, 0xdf, 0x08, 0xda,
		0x5a, 0x86, 0x84, 0x19, 0xa1, 0x9b, 0x30, 0x0f,
		0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
		0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30,
		0x77, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
		0x04, 0x06, 0x13, 0x02, 0x43, 0x41, 0x31, 0x10,
		0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13,
		0x07, 0x54, 0x6f, 0x72, 0x6f, 0x6e, 0x74, 0x6f,
		0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,
		0x07, 0x13, 0x02, 0x4f, 0x4e, 0x31, 0x1b, 0x30,
		0x19, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x12,
		0x4d, 0x79, 0x20, 0x41, 0x77, 0x65, 0x73, 0x6f,
		0x6d, 0x65, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61,
		0x6e, 0x79, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03,
		0x55, 0x04, 0x0b, 0x13, 0x0b, 0x43, 0x41, 0x20,
		0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
		0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04,
		0x03, 0x13, 0x0d, 0x4d, 0x79, 0x20, 0x41, 0x77,
		0x65, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x43, 0x41,
		0x30, 0x1e, 0x17, 0x0d, 0x32, 0x32, 0x31, 0x32,
		0x31, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x5a, 0x17, 0x0d, 0x32, 0x33, 0x31, 0x32, 0x31,
		0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a,
		0x30, 0x7c, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
		0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x41, 0x31,
		0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08,
		0x13, 0x07, 0x54, 0x6f, 0x72, 0x6f, 0x6e, 0x74,
		0x6f, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
		0x04, 0x07, 0x13, 0x02, 0x4f, 0x4e, 0x31, 0x1b,
		0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13,
		0x12, 0x4d, 0x79, 0x20, 0x41, 0x77, 0x65, 0x73,
		0x6f, 0x6d, 0x65, 0x20, 0x43, 0x6f, 0x6d, 0x70,
		0x61, 0x6e, 0x79, 0x31, 0x1d, 0x30, 0x1b, 0x06,
		0x03, 0x55, 0x04, 0x0b, 0x13, 0x14, 0x44, 0x69,
		0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
		0x64, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
		0x65, 0x73, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03,
		0x55, 0x04, 0x03, 0x13, 0x09, 0x31, 0x32, 0x37,
		0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x30, 0x82,
		0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86,
		0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05,
		0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82,
		0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc5,
		0xd5, 0x62, 0x93, 0x9c, 0x1d, 0x29, 0x74, 0xfe,
		0xa1, 0x5e, 0x38, 0x69, 0xbd, 0x93, 0xf1, 0x77,
		0x75, 0xe6, 0x69, 0xdf, 0x1f, 0x8c, 0x6d, 0xdc,
		0x05, 0x3f, 0x8d, 0xa1, 0x22, 0xab, 0x1b, 0x0b,
		0x50, 0xc4, 0x78, 0x95, 0x21, 0x32, 0x56, 0x6c,
		0x24, 0x03, 0x97, 0x20, 0x3d, 0x03, 0x0e, 0x24,
		0xa6, 0x4f, 0x2d, 0xe0, 0x1c, 0xb0, 0x42, 0xa1,
		0xec, 0x17, 0x37, 0x50, 0x68, 0xfb, 0x69, 0x3d,
		0xd9, 0x9d, 0x10, 0xa9, 0x9c, 0x39, 0xe6, 0xdc,
		0x4e, 0x63, 0xd0, 0xa5, 0xb6, 0x96, 0xf3, 0x2f,
		0xfc, 0x96, 0xfd, 0x47, 0xa2, 0x19, 0xe1, 0x2c,
		0x2b, 0xb2, 0x9a, 0xa2, 0x7f, 0x29, 0x7c, 0x14,
		0x5a, 0x9a, 0x16, 0x88, 0x38, 0x98, 0xc8, 0x1b,
		0xa6, 0x4d, 0xc5, 0x23, 0x96, 0x6e, 0xa2, 0x09,
		0x70, 0x76, 0x7b, 0x8b, 0x8f, 0x12, 0x6b, 0xfa,
		0x58, 0xc2, 0x4a, 0x63, 0x32, 0xb6, 0xc0, 0x22,
		0x49, 0x08, 0x70, 0xb1, 0x05, 0xf5, 0x55, 0x3e,
		0x5f, 0xe2, 0xdf, 0x0a, 0x01, 0x2b, 0x2a, 0x67,
		0x76, 0xe2, 0xc6, 0x94, 0xac, 0xdc, 0x29, 0x5c,
		0x13, 0x6a, 0xbe, 0xe7, 0x3d, 0x6c, 0xfe, 0x90,
		0xfe, 0xd1, 0xa1, 0xc0, 0x61, 0x04, 0x1a, 0xdb,
		0x43, 0x8f, 0x4d, 0xb4, 0xd6, 0x07, 0x6c, 0xb6,
		0x50, 0xb1, 0x76, 0xa7, 0x05, 0x1d, 0x1c, 0x68,
		0x53, 0x7e, 0x54, 0x72, 0xa2, 0x98, 0xf5, 0x1f,
		0x32, 0x16, 0x7b, 0xef, 0x79, 0x7b, 0x2a, 0x77,
		0x31, 0x52, 0xd4, 0x64, 0x96, 0x74, 0xcd, 0x3f,
		0x61, 0x58, 0x67, 0xbc, 0x22, 0xcc, 0xca, 0xa3,
		0x4f, 0xaf, 0x9c, 0x24, 0x29, 0x2b, 0x14, 0x3a,
		0xa3, 0xfa, 0xe7, 0xbd, 0xd6, 0xee, 0x45, 0x1a,
		0x52, 0x7d, 0x8d, 0xac, 0xcf, 0x8a, 0xf4, 0x5a,
		0x16, 0x3d, 0xe1, 0x64, 0xa9, 0x14, 0x3e, 0x8f,
		0xa3, 0x97, 0x49, 0x32, 0xd8, 0x32, 0xd5, 0x02,
		0x03, 0x01, 0x00, 0x01, 0xa3, 0x81, 0x92, 0x30,
		0x81, 0x8f, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d,
		0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02,
		0x05, 0xa0, 0x30, 0x13, 0x06, 0x03, 0x55, 0x1d,
		0x25, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b,
		0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30,
		0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01,
		0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x1d, 0x06,
		0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14,
		0x6e, 0x0c, 0xb8, 0x30, 0x98, 0x71, 0xe8, 0xf0,
		0xda, 0x52, 0x2f, 0x70, 0x2c, 0x43, 0xb8, 0xae,
		0x67, 0xd8, 0x81, 0xa1, 0x30, 0x1f, 0x06, 0x03,
		0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
		0x14, 0x1f, 0x52, 0xa7, 0x90, 0x78, 0x0d, 0x79,
		0xb3, 0x20, 0x66, 0x81, 0x16, 0x8c, 0x01, 0x17,
		0x6a, 0xe7, 0x58, 0x5f, 0x88, 0x30, 0x1a, 0x06,
		0x03, 0x55, 0x1d, 0x11, 0x04, 0x13, 0x30, 0x11,
		0x82, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68,
		0x6f, 0x73, 0x74, 0x87, 0x04, 0x7f, 0x00, 0x00,
		0x01, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,
		0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00,
		0x03, 0x82, 0x01, 0x01, 0x00, 0x9a, 0xfb, 0x4e,
		0x7e, 0x12, 0x87, 0x50, 0xb8, 0x73, 0xbe, 0xfe,
		0xb3, 0x66, 0x7e, 0x97, 0xcb, 0x4a, 0x73, 0x16,
		0x0d, 0xbf, 0xe6, 0x4d, 0x14, 0x3d, 0xb3, 0xb3,
		0x74, 0xa0, 0xe0, 0x0d, 0x9e, 0x30, 0xda, 0x92,
		0xcb, 0xe4, 0x96, 0xf9, 0x9c, 0xb0, 0xbf, 0xa8,
		0x3f, 0xdf, 0x4a, 0x80, 0xc5, 0xed, 0xf6, 0xbf,
		0x26, 0x32, 0x99, 0x82, 0x99, 0xa4, 0x02, 0x64,
		0xc3, 0x0c, 0x1d, 0xd8, 0xa0, 0x8c, 0x9b, 0x5c,
		0x34, 0x9b, 0x7c, 0x10, 0xf4, 0x9c, 0x02, 0x4e,
		0xcb, 0x27, 0x43, 0x40, 0xcc, 0x04, 0xec, 0xe2,
		0x0a, 0x4f, 0xb5, 0x1b, 0xd1, 0x08, 0xd3, 0x56,
		0xb7, 0x10, 0xa2, 0xe0, 0xb8, 0xfb, 0x68, 0xb8,
		0xfe, 0xff, 0x7a, 0xb4, 0xc4, 0x1a, 0xe0, 0x92,
		0x0b, 0x16, 0x97, 0xb5, 0x10, 0x5e, 0x75, 0xe7,
		0x2e, 0x77, 0x1f, 0xae, 0x42, 0x25, 0xaa, 0xbc,
		0xeb, 0x80, 0x8f, 0xc0, 0xf9, 0xc5, 0xa7, 0x67,
		0x14, 0x97, 0x16, 0xa6, 0xb9, 0x5a, 0xe8, 0xeb,
		0xad, 0xa5, 0xc3, 0xe2, 0x68, 0x3c, 0x62, 0xeb,
		0xf6, 0x0d, 0x54, 0x46, 0x6d, 0xb9, 0x86, 0xfb,
		0x96, 0xb8, 0x09, 0xb0, 0x8f, 0xa2, 0x18, 0xaf,
		0xbe, 0x86, 0x08, 0xd8, 0x2e, 0x10, 0x30, 0x7d,
		0x54, 0x6a, 0x40, 0x00, 0x53, 0xeb, 0x2a, 0xdd,
		0x94, 0xf1, 0x52, 0x17, 0x0d, 0xac, 0x69, 0xd3,
		0x31, 0x29, 0x29, 0x76, 0xe9, 0xf1, 0x60, 0xf0,
		0xf0, 0x78, 0x28, 0x60, 0xae, 0xc5, 0xce, 0xfc,
		0x70, 0xf6, 0xf6, 0x7f, 0x23, 0x47, 0x61, 0xcd,
		0xe8, 0x4a, 0x0a, 0x73, 0xc5, 0x98, 0x6c, 0x15,
		0x23, 0x99, 0x45, 0xd4, 0x8f, 0xe6, 0xb8, 0x90,
		0x37, 0xeb, 0xf3, 0x4f, 0xaf, 0x95, 0x22, 0x1e,
		0x2a, 0xa4, 0x09, 0xec, 0x7c, 0x72, 0x16, 0x9d,
		0x42, 0xbd, 0x48, 0xec, 0x5e, 0x43, 0x5c, 0x20,
		0x4a, 0xd0, 0xdf, 0x79, 0x06, 0x16, 0x03, 0x03,
		0x00, 0x04, 0x0e, 0x00, 0x00, 0x00,
	}
	records := FromBytes(packetBytes)
	if len(records) != 3 {
		t.Error(len(records))
	}
}
