package record_test

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/hmac"
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha1"
	"crypto/x509"
	"os"
	"testing"

	"github.com/arailly/mytls12/handshake"
	"github.com/arailly/mytls12/record"
	"github.com/arailly/mytls12/util"
	"github.com/google/go-cmp/cmp"
)

var (
	encryptedPreMasterSecret = []byte{
		0x3b, 0xce, 0x5a, 0x87, 0x2c, 0xc6, 0x46, 0xb8,
		0x4f, 0x5b, 0x1a, 0x27, 0xb7, 0x2e, 0xca, 0xfe,
		0xc9, 0x12, 0xcc, 0xea, 0xe6, 0xe2, 0x58, 0x78,
		0x3a, 0x2a, 0x06, 0x56, 0x2a, 0x29, 0xa3, 0x15,
		0xcf, 0x8a, 0xeb, 0x68, 0x55, 0x84, 0x28, 0xd9,
		0xea, 0x34, 0x93, 0x30, 0xdd, 0xf7, 0x00, 0x47,
		0xeb, 0x32, 0x4b, 0x80, 0x5d, 0xf3, 0x0a, 0xde,
		0xe2, 0x95, 0x24, 0xc4, 0xe0, 0x03, 0x2c, 0xdc,
		0x2b, 0xfe, 0x20, 0x84, 0x78, 0xcd, 0xf3, 0xa1,
		0xb1, 0xbc, 0x63, 0x77, 0x48, 0x55, 0x3d, 0xaa,
		0x6b, 0xa3, 0xa8, 0xd4, 0x40, 0x68, 0xfd, 0x5d,
		0x43, 0xb6, 0x9a, 0xa4, 0xce, 0x11, 0x5d, 0x9f,
		0x1b, 0x4f, 0xa3, 0x43, 0x28, 0x9d, 0xc2, 0xd0,
		0xb5, 0x09, 0x0f, 0x49, 0xaf, 0x86, 0xf4, 0xb8,
		0x2f, 0x7e, 0xc7, 0x0c, 0xb6, 0x35, 0x17, 0x29,
		0xa9, 0xfd, 0xac, 0xba, 0x52, 0xa3, 0xb3, 0x41,
		0xe5, 0xf9, 0xb3, 0xa4, 0x05, 0xfc, 0x8f, 0x7f,
		0x5e, 0xf4, 0xe6, 0x85, 0xef, 0x3e, 0xe8, 0x66,
		0xeb, 0xb4, 0x7b, 0x04, 0xaf, 0xe7, 0x86, 0x76,
		0x8b, 0xbd, 0x98, 0x74, 0x0b, 0xd0, 0x1d, 0xfa,
		0xaa, 0x68, 0x20, 0xf7, 0xc9, 0xc6, 0x4a, 0x17,
		0xd2, 0xe5, 0x4d, 0x3e, 0xfa, 0x7e, 0x44, 0x6a,
		0x08, 0x68, 0xd6, 0x81, 0xa8, 0xbb, 0x8d, 0x22,
		0x06, 0x64, 0xb7, 0xf2, 0x7a, 0x4c, 0xb2, 0x39,
		0x17, 0x8e, 0x84, 0x0f, 0xb4, 0x11, 0xd9, 0xb1,
		0x2b, 0xfb, 0xad, 0xbd, 0x73, 0x7c, 0x65, 0xd8,
		0x65, 0x19, 0x8c, 0xeb, 0x02, 0x97, 0x58, 0xe0,
		0xce, 0x04, 0x13, 0x01, 0xcf, 0xa5, 0xe4, 0x4b,
		0xe0, 0x71, 0x68, 0xa1, 0xcd, 0x15, 0xfe, 0x41,
		0x8e, 0x37, 0x9f, 0x75, 0xc7, 0xeb, 0xc0, 0x9d,
		0xd9, 0x2d, 0xa7, 0x09, 0xce, 0x8e, 0x44, 0x36,
		0x99, 0x75, 0xd9, 0x99, 0x0c, 0xe1, 0x3c, 0x97,
	}
	clientRandom = []byte{
		0x61, 0x7b, 0x6f, 0x34, 0x9f, 0x99, 0x45, 0xfe,
		0x09, 0xb8, 0xa7, 0xf9, 0x21, 0x2a, 0xb3, 0xca,
		0x45, 0xbd, 0x51, 0x2a, 0x81, 0xab, 0xad, 0x32,
		0xb0, 0x96, 0x65, 0xed, 0x54, 0xed, 0x54, 0xa6,
	}
	serverRandom = []byte{
		0x16, 0xb5, 0xfd, 0xde, 0xcc, 0x01, 0xa3, 0xc1,
		0xc4, 0x5c, 0x90, 0x38, 0x50, 0xe3, 0x6f, 0x99,
		0x03, 0xcd, 0xf9, 0xc9, 0xbe, 0xe7, 0x56, 0x7e,
		0x44, 0x4f, 0x57, 0x4e, 0x47, 0x52, 0x44, 0x01,
	}
	iv = []byte{
		0x69, 0x7e, 0x0a,
		0x72, 0x19, 0xc6, 0x85, 0x0a, 0x73, 0xad, 0xc4,
		0xe6, 0x6e, 0x67, 0xd4, 0xd5,
	}
	verifyData = []byte{
		0x67, 0x1d, 0x8f, 0x60, 0x05, 0xfb, 0xb8, 0x58,
		0x9b, 0xef, 0x2c, 0xfc,
	}
	finished = []byte{
		0x14, 0x00, 0x00, 0x0c, 0x67, 0x1d, 0x8f, 0x60,
		0x05, 0xfb, 0xb8, 0x58, 0x9b, 0xef, 0x2c, 0xfc,
	}
)

func GetPrivateKey(t *testing.T) *rsa.PrivateKey {
	keyData, err := os.ReadFile("../config/server-key.der")
	if err != nil {
		t.Fatal(err)
	}
	privKey, err := x509.ParsePKCS1PrivateKey(keyData)
	if err != nil {
		t.Fatal(err)
	}
	return privKey
}

func CalcMasterSecret(t *testing.T) []byte {
	rng := rand.Reader
	privKey := GetPrivateKey(t)
	preMasterSecret, err := rsa.DecryptPKCS1v15(rng, privKey, encryptedPreMasterSecret)
	if err != nil {
		t.Fatal(err)
	}
	masterSecret := record.CalcMasterSecret(
		preMasterSecret,
		clientRandom,
		serverRandom,
	)
	return masterSecret
}

func TestCalcBlockCiphered(t *testing.T) {
	masterSecret := CalcMasterSecret(t)
	keyBlock := record.CalcKeyBlock(masterSecret, serverRandom, clientRandom, 20*2+16*2)
	clientWriteMACKey := keyBlock[:20]
	clientWriteKey := keyBlock[40:56]

	handshake := util.ToBytes(handshake.NewHandshake(
		handshake.HandshakeTypeFinished,
		util.ToBytes(verifyData),
	))
	mac := hmac.New(sha1.New, clientWriteMACKey)
	macSeed := []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x16, 0x03, 0x03, 0x00, 0x10,
	}
	macSeed = append(macSeed, handshake...)
	mac.Write(macSeed)
	expectedBlockCiphered := []byte{
		0xc6, 0x44, 0x4a,
		0x31, 0x56, 0xef, 0x96, 0xa7, 0xc6, 0x6d, 0x92,
		0x1e, 0x3e, 0x7f, 0x22, 0x78, 0x3c, 0x81, 0x36,
		0x1f, 0xbf, 0x78, 0x34, 0x23, 0x46, 0xa8, 0x72,
		0xde, 0x6b, 0x9d, 0x89, 0x19, 0x33, 0xe2, 0x80,
		0xc2, 0xba, 0x9c, 0xc7, 0xbe, 0x26, 0xaf, 0x32,
		0x84, 0xf2, 0x3c, 0xc8, 0x86,
	}
	blockCiphered := record.CalcBlockCiphered(
		handshake,
		mac.Sum(nil),
		clientWriteKey,
		iv,
	)
	if diff := cmp.Diff(expectedBlockCiphered, blockCiphered); diff != "" {
		t.Error(diff)
	}
}

func TestNewTLSCipherText(t *testing.T) {
	masterSecret := CalcMasterSecret(t)
	handshake := util.ToBytes(handshake.NewHandshake(
		handshake.HandshakeTypeFinished,
		util.ToBytes(verifyData),
	))

	keyBlock := record.CalcKeyBlock(masterSecret, serverRandom, clientRandom, 20*2+16*2)
	macKey := keyBlock[:20]
	encKey := keyBlock[40:56]
	genericBlockCipher := record.CalcGenericBlockCipher(
		record.ContentTypeHandshake,
		record.ProtocolVersionTLS12,
		macKey,
		encKey,
		handshake,
		0,
		iv,
	)
	tlsCipherText := record.NewTLSCipherText(
		record.ContentTypeHandshake,
		record.ProtocolVersionTLS12,
		util.ToBytes(genericBlockCipher),
	)
	expected := []byte{
		0x16, 0x03, 0x03, 0x00, 0x40, 0x69, 0x7e, 0x0a,
		0x72, 0x19, 0xc6, 0x85, 0x0a, 0x73, 0xad, 0xc4,
		0xe6, 0x6e, 0x67, 0xd4, 0xd5, 0xc6, 0x44, 0x4a,
		0x31, 0x56, 0xef, 0x96, 0xa7, 0xc6, 0x6d, 0x92,
		0x1e, 0x3e, 0x7f, 0x22, 0x78, 0x3c, 0x81, 0x36,
		0x1f, 0xbf, 0x78, 0x34, 0x23, 0x46, 0xa8, 0x72,
		0xde, 0x6b, 0x9d, 0x89, 0x19, 0x33, 0xe2, 0x80,
		0xc2, 0xba, 0x9c, 0xc7, 0xbe, 0x26, 0xaf, 0x32,
		0x84, 0xf2, 0x3c, 0xc8, 0x86,
	}
	actual := util.ToBytes(tlsCipherText)
	if diff := cmp.Diff(expected, actual); diff != "" {
		t.Error(diff)
	}
}

func TestCalcAEADCiphered(t *testing.T) {
	// verifyData := []byte{
	// 	0x5e, 0x67, 0xbf, 0xdf, 0xc8, 0x72, 0x95, 0x64,
	// 	0x9c, 0xbf, 0x4b, 0xca,
	// }
	encryptedVerifyData := []byte{
		0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x46, 0x6d,
		0xdf, 0xa9, 0x0f, 0x31, 0x6d, 0x1a, 0x7f, 0xe2,
		0x3c, 0xb6, 0x7e, 0x79, 0x4a, 0x83, 0xc3, 0xa5,
		0xbd, 0xd2, 0xd3, 0x04, 0x43, 0xfc, 0xcf, 0x99,
		0xeb, 0x33, 0x76, 0x57, 0x7f,
	}
	_ = encryptedVerifyData

	encryptedPMS := []byte{
		0xa8, 0xf6, 0x13, 0x88, 0x3c, 0xab, 0xbb, 0x31,
		0xcc, 0x79, 0x22, 0xb0, 0x73, 0x7a, 0xe8, 0x9e,
		0x94, 0x88, 0xf1, 0x7a, 0xa9, 0x6f, 0xca, 0x83,
		0x1f, 0xb9, 0x01, 0xa4, 0x27, 0x09, 0xe9, 0x99,
		0xf4, 0x25, 0x6a, 0x79, 0xc9, 0xa2, 0xa3, 0xe6,
		0x25, 0x2a, 0xf1, 0xe7, 0x25, 0x15, 0x8d, 0x55,
		0x70, 0x97, 0x19, 0x4e, 0x40, 0x55, 0xb5, 0xe9,
		0x3f, 0x5d, 0xa1, 0x87, 0xf2, 0x3b, 0x6c, 0xf6,
		0x35, 0x9e, 0x0c, 0x31, 0x42, 0x90, 0x48, 0xea,
		0x4c, 0xe6, 0x99, 0xa7, 0x5c, 0x0c, 0xc7, 0x14,
		0xac, 0x9d, 0x9c, 0x7b, 0x36, 0x89, 0xcc, 0xf4,
		0x19, 0x39, 0xe2, 0x44, 0xae, 0xba, 0x53, 0x12,
		0x5e, 0x26, 0xb8, 0x29, 0x89, 0x2b, 0xda, 0xa4,
		0xa8, 0x16, 0x05, 0x35, 0xe0, 0x2d, 0x15, 0x50,
		0xc5, 0x0b, 0x98, 0x8f, 0x93, 0x29, 0x60, 0xa5,
		0xb8, 0x77, 0x5d, 0xd5, 0x6a, 0x21, 0x5c, 0x92,
		0xcf, 0x15, 0xae, 0x1d, 0xa3, 0x42, 0xaa, 0x51,
		0x25, 0x44, 0xc4, 0x73, 0x29, 0x37, 0x27, 0x1e,
		0x38, 0xb2, 0x91, 0x6a, 0x78, 0x59, 0xf6, 0xc3,
		0xdb, 0x4f, 0xbd, 0x93, 0x38, 0x5e, 0x33, 0xc5,
		0xba, 0x39, 0xa6, 0x0e, 0x74, 0x60, 0x22, 0x9a,
		0xfc, 0xe4, 0x27, 0xd9, 0x60, 0x09, 0x16, 0xe8,
		0xa5, 0x0a, 0x13, 0x5e, 0x12, 0xc8, 0xa6, 0x8d,
		0x17, 0x9c, 0xee, 0xc6, 0x4a, 0xc7, 0xa1, 0x0a,
		0xb2, 0x68, 0xe6, 0xc1, 0xdb, 0xd6, 0x98, 0x38,
		0xaf, 0x3a, 0x8d, 0x3b, 0xaa, 0xb6, 0xd1, 0xf4,
		0xf7, 0x22, 0xd0, 0x33, 0x03, 0xfe, 0x14, 0x0d,
		0xc9, 0xd5, 0x61, 0xe2, 0xe0, 0x56, 0x5a, 0x24,
		0xb1, 0xe2, 0x31, 0x7d, 0xfa, 0x3c, 0x53, 0x9c,
		0x2a, 0x10, 0x68, 0x29, 0x08, 0x89, 0x48, 0xa3,
		0xab, 0x0a, 0xb1, 0x6e, 0x43, 0xeb, 0xd6, 0x3b,
		0x80, 0x88, 0x47, 0x9a, 0x7a, 0x35, 0x60, 0x14,
	}
	rng := rand.Reader
	privKey := GetPrivateKey(t)
	preMasterSecret, err := rsa.DecryptPKCS1v15(rng, privKey, encryptedPMS)
	if err != nil {
		t.Fatal(err)
	}
	clientRandom := make([]byte, 32)
	constRand := util.NewConstRand()
	constRand.Read(clientRandom)
	masterSecret := record.CalcMasterSecret(
		preMasterSecret,
		clientRandom,
		clientRandom,
	)
	keyBlock := record.NewKeyBlock(
		masterSecret,
		clientRandom,
		clientRandom,
		0,
		16,
		4,
	)
	key := keyBlock.ClientWriteKey
	implicitNonce := keyBlock.ClientWriteIV
	explicitNonce := encryptedVerifyData[:8]
	nonce := append(implicitNonce, explicitNonce...)
	block, err := aes.NewCipher(key)
	if err != nil {
		t.Fatal(err)
	}
	gcm, err := cipher.NewGCM(block)
	if err != nil {
		t.Fatal(err)
	}
	additionalData := util.ToBytes(uint64(0))
	additionalData = append(additionalData, record.ContentTypeHandshake)
	additionalData = append(additionalData, util.ToBytes(record.ProtocolVersionTLS12)...)
	length := util.ToBytes(uint16(16))
	additionalData = append(additionalData, length...)
	cipherText := encryptedVerifyData[8:]
	plainText, err := gcm.Open(nil, nonce, cipherText, additionalData)
	if err != nil {
		t.Error(err)
	}
	_ = plainText
}
